version: '3.8'

networks:
  astra-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

services:
  # Infrastructure Services
  postgres:
    image: postgres:15
    container_name: astra-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: astradb
      POSTGRES_USER: astrauser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-astrapass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - astra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U astrauser -d astradb"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: astra-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - astra-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Modified for microservices routing)
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: astra-api-gateway
    restart: unless-stopped
    environment:
      - SERVICE_NAME=api-gateway
      - SERVICE_PORT=8000
      - DATABASE_URL=postgresql://astrauser:${POSTGRES_PASSWORD:-astrapass123}@postgres:5432/astradb
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astra-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Microservices
  user-service:
    build:
      context: .
      dockerfile: services/user/Dockerfile
    container_name: astra-user-service
    restart: unless-stopped
    environment:
      - SERVICE_NAME=user
      - SERVICE_PORT=8006
      - DATABASE_URL=postgresql://astrauser:${POSTGRES_PASSWORD:-astrapass123}@postgres:5432/astradb
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - SERVICE_REGISTRY_URL=redis://redis:6379
    ports:
      - "8006:8006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astra-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  trading-service:
    build:
      context: .
      dockerfile: services/trading/Dockerfile
    container_name: astra-trading-service
    restart: unless-stopped
    environment:
      - SERVICE_NAME=trading
      - SERVICE_PORT=8001
      - DATABASE_URL=postgresql://astrauser:${POSTGRES_PASSWORD:-astrapass123}@postgres:5432/astradb
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - SERVICE_REGISTRY_URL=redis://redis:6379
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astra-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  gamification-service:
    build:
      context: .
      dockerfile: services/gamification/Dockerfile
    container_name: astra-gamification-service
    restart: unless-stopped
    environment:
      - SERVICE_NAME=gamification
      - SERVICE_PORT=8002
      - DATABASE_URL=postgresql://astrauser:${POSTGRES_PASSWORD:-astrapass123}@postgres:5432/astradb
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - SERVICE_REGISTRY_URL=redis://redis:6379
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astra-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  social-service:
    build:
      context: .
      dockerfile: services/social/Dockerfile
    container_name: astra-social-service
    restart: unless-stopped
    environment:
      - SERVICE_NAME=social
      - SERVICE_PORT=8003
      - DATABASE_URL=postgresql://astrauser:${POSTGRES_PASSWORD:-astrapass123}@postgres:5432/astradb
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - SERVICE_REGISTRY_URL=redis://redis:6379
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astra-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  financial-service:
    build:
      context: .
      dockerfile: services/financial/Dockerfile
    container_name: astra-financial-service
    restart: unless-stopped
    environment:
      - SERVICE_NAME=financial
      - SERVICE_PORT=8004
      - DATABASE_URL=postgresql://astrauser:${POSTGRES_PASSWORD:-astrapass123}@postgres:5432/astradb
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - SERVICE_REGISTRY_URL=redis://redis:6379
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astra-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nft-service:
    build:
      context: .
      dockerfile: services/nft/Dockerfile
    container_name: astra-nft-service
    restart: unless-stopped
    environment:
      - SERVICE_NAME=nft
      - SERVICE_PORT=8005
      - DATABASE_URL=postgresql://astrauser:${POSTGRES_PASSWORD:-astrapass123}@postgres:5432/astradb
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - SERVICE_REGISTRY_URL=redis://redis:6379
    ports:
      - "8005:8005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - astra-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack (existing)
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: astra-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - astra-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:10.1.0
    container_name: astra-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - astra-network
    depends_on:
      - prometheus
    profiles:
      - monitoring