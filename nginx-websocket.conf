# NGINX Configuration for WebSocket Load Balancing
# Optimized for 1000+ concurrent WebSocket connections

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# Optimize for high concurrency
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance Optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=websocket:10m rate=10r/m;

    # WebSocket Connection Limits
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Upstream API Gateway Servers
    upstream api_gateway {
        least_conn;
        server api-gateway:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Upstream for WebSocket connections
    upstream websocket_backend {
        ip_hash; # Ensure session stickiness for WebSocket connections
        server api-gateway:8000 max_fails=3 fail_timeout=30s;
        keepalive 100;
    }

    # HTTP to HTTPS Redirect
    server {
        listen 80;
        server_name astratrade.com www.astratrade.com api.astratrade.com;
        return 301 https://$server_name$request_uri;
    }

    # Main HTTPS Server
    server {
        listen 443 ssl http2;
        server_name api.astratrade.com;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/astratrade.crt;
        ssl_certificate_key /etc/nginx/ssl/astratrade.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security Headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Health Check Endpoint
        location /health {
            proxy_pass http://api_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            access_log off;
        }

        # WebSocket Endpoint for Tournament
        location /ws/ {
            # Rate limiting for WebSocket connections
            limit_req zone=websocket burst=5 nodelay;
            limit_conn addr 10;

            proxy_pass http://websocket_backend;
            
            # WebSocket Headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 3600s; # 1 hour for WebSocket connections

            # Disable buffering for WebSocket
            proxy_buffering off;
            
            # WebSocket specific
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Forwarded-Server $host;
        }

        # API Endpoints
        location /api/ {
            # Rate limiting for API calls
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://api_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # API Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # CORS Headers
            add_header Access-Control-Allow-Origin "https://astratrade.com" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Correlation-ID" always;
            add_header Access-Control-Allow-Credentials "true" always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        # Static Assets (if any)
        location /static/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }

        # Default location
        location / {
            return 404;
        }
    }

    # Status and Monitoring
    server {
        listen 8080;
        server_name localhost;

        location /nginx_status {
            stub_status;
            allow 127.0.0.1;
            allow 172.20.0.0/16; # Docker network
            deny all;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# Stream Module for TCP Load Balancing (if needed)
stream {
    upstream redis_backend {
        server redis-master:6379;
    }

    server {
        listen 6380;
        proxy_pass redis_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        proxy_bind $remote_addr transparent;
    }
}